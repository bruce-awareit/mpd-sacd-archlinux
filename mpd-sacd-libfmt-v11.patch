diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/client/Idle.cxx mpd-sacd.git-libfmt-v11-patch/src/client/Idle.cxx
--- mpd-sacd.git.orig/src/client/Idle.cxx	2025-01-27 20:31:20.401730503 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/client/Idle.cxx	2025-01-27 21:49:13.752743261 +0800
@@ -16,7 +16,7 @@
 	const char *const*idle_names = idle_get_names();
 	for (unsigned i = 0; idle_names[i]; ++i) {
 		if (flags & (1 << i))
-			r.Fmt(FMT_STRING("changed: {}\n"), idle_names[i]);
+			r.Fmt("changed: {}\n", idle_names[i]);
 	}
 
 	r.Write("OK\n");
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/client/Response.cxx mpd-sacd.git-libfmt-v11-patch/src/client/Response.cxx
--- mpd-sacd.git.orig/src/client/Response.cxx	2025-01-27 20:31:20.401730503 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/client/Response.cxx	2025-01-27 21:02:36.152297520 +0800
@@ -50,7 +50,7 @@
 void
 Response::Error(enum ack code, const char *msg) noexcept
 {
-	Fmt(FMT_STRING("ACK [{}@{}] {{{}}} "),
+	Fmt("ACK [{}@{}] {{{}}} ",
 	    (int)code, list_index, command);
 
 	Write(msg);
@@ -61,7 +61,7 @@
 Response::VFmtError(enum ack code,
 		    fmt::string_view format_str, fmt::format_args args) noexcept
 {
-	Fmt(FMT_STRING("ACK [{}@{}] {{{}}} "),
+	Fmt("ACK [{}@{}] {{{}}} ",
 	    (int)code, list_index, command);
 
 	VFmt(format_str, args);
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/command/AllCommands.cxx mpd-sacd.git-libfmt-v11-patch/src/command/AllCommands.cxx
--- mpd-sacd.git.orig/src/command/AllCommands.cxx	2025-01-27 20:31:20.401730503 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/command/AllCommands.cxx	2025-01-27 21:05:08.238766679 +0800
@@ -247,7 +247,7 @@
 
 		if (cmd->permission == (permission & cmd->permission) &&
 		    command_available(partition, cmd))
-			r.Fmt(FMT_STRING("command: {}\n"), cmd->cmd);
+			r.Fmt("command: {}\n", cmd->cmd);
 	}
 
 	return CommandResult::OK;
@@ -260,7 +260,7 @@
 		const struct command *cmd = &i;
 
 		if (cmd->permission != (permission & cmd->permission))
-			r.Fmt(FMT_STRING("command: {}\n"), cmd->cmd);
+			r.Fmt("command: {}\n", cmd->cmd);
 	}
 
 	return CommandResult::OK;
@@ -318,7 +318,7 @@
 {
 	if (cmd->permission != (permission & cmd->permission)) {
 		r.FmtError(ACK_ERROR_PERMISSION,
-			   FMT_STRING("you don't have permission for \"{}\""),
+			   "you don't have permission for \"{}\"",
 			   cmd->cmd);
 		return false;
 	}
@@ -331,17 +331,17 @@
 
 	if (min == max && unsigned(max) != args.size()) {
 		r.FmtError(ACK_ERROR_ARG,
-			   FMT_STRING("wrong number of arguments for \"{}\""),
+			   "wrong number of arguments for \"{}\"",
 			   cmd->cmd);
 		return false;
 	} else if (args.size() < unsigned(min)) {
 		r.FmtError(ACK_ERROR_ARG,
-			   FMT_STRING("too few arguments for \"{}\""),
+			   "too few arguments for \"{}\"",
 			   cmd->cmd);
 		return false;
 	} else if (max >= 0 && args.size() > unsigned(max)) {
 		r.FmtError(ACK_ERROR_ARG,
-			   FMT_STRING("too many arguments for \"{}\""),
+			   "too many arguments for \"{}\"",
 			   cmd->cmd);
 		return false;
 	} else
@@ -355,7 +355,7 @@
 	const struct command *cmd = command_lookup(cmd_name);
 	if (cmd == nullptr) {
 		r.FmtError(ACK_ERROR_UNKNOWN,
-			   FMT_STRING("unknown command \"{}\""), cmd_name);
+			   "unknown command \"{}\"", cmd_name);
 		return nullptr;
 	}
 
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/command/DatabaseCommands.cxx mpd-sacd.git-libfmt-v11-patch/src/command/DatabaseCommands.cxx
--- mpd-sacd.git.orig/src/command/DatabaseCommands.cxx	2025-01-27 20:31:20.401730503 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/command/DatabaseCommands.cxx	2025-01-27 21:06:46.871972331 +0800
@@ -227,7 +227,7 @@
 		group = tag_name_parse_i(s);
 		if (group == TAG_NUM_OF_ITEM_TYPES) {
 			r.FmtError(ACK_ERROR_ARG,
-				   FMT_STRING("Unknown tag type: {}"), s);
+				   "Unknown tag type: {}", s);
 			return CommandResult::ERROR;
 		}
 
@@ -308,7 +308,7 @@
 	const auto tagType = tag_name_parse_i(tag_name);
 	if (tagType == TAG_NUM_OF_ITEM_TYPES) {
 		r.FmtError(ACK_ERROR_ARG,
-			   FMT_STRING("Unknown tag type: {}"), tag_name);
+			   "Unknown tag type: {}", tag_name);
 		return CommandResult::ERROR;
 	}
 
@@ -322,7 +322,7 @@
 		/* for compatibility with < 0.12.0 */
 		if (tagType != TAG_ALBUM) {
 			r.FmtError(ACK_ERROR_ARG,
-				   FMT_STRING("should be \"{}\" for 3 arguments"),
+				   "should be \"{}\" for 3 arguments",
 				   tag_item_names[TAG_ALBUM]);
 			return CommandResult::ERROR;
 		}
@@ -337,7 +337,7 @@
 		const auto group = tag_name_parse_i(s);
 		if (group == TAG_NUM_OF_ITEM_TYPES) {
 			r.FmtError(ACK_ERROR_ARG,
-				   FMT_STRING("Unknown tag type: {}"), s);
+				   "Unknown tag type: {}", s);
 			return CommandResult::ERROR;
 		}
 
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/command/FileCommands.cxx mpd-sacd.git-libfmt-v11-patch/src/command/FileCommands.cxx
--- mpd-sacd.git.orig/src/command/FileCommands.cxx	2025-01-27 20:31:20.401730503 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/command/FileCommands.cxx	2025-01-27 21:08:04.111872517 +0800
@@ -68,12 +68,12 @@
 			continue;
 
 		if (fi.IsRegular())
-			r.Fmt(FMT_STRING("file: {}\n"
-					 "size: {}\n"),
+			r.Fmt("file: {}\n"
+					 "size: {}\n",
 			      name_utf8,
 			      fi.GetSize());
 		else if (fi.IsDirectory())
-			r.Fmt(FMT_STRING("directory: {}\n"), name_utf8);
+			r.Fmt("directory: {}\n", name_utf8);
 		else
 			continue;
 
@@ -111,7 +111,7 @@
 
 	void OnPair(std::string_view key, std::string_view value) noexcept override {
 		if (IsValidName(key) && IsValidValue(value))
-			response.Fmt(FMT_STRING("{}: {}\n"), key, value);
+			response.Fmt("{}: {}\n", key, value);
 	}
 };
 
@@ -200,7 +200,7 @@
 		read_size = is->Read(lock, buffer.get(), buffer_size);
 	}
 
-	r.Fmt(FMT_STRING("size: {}\n"), art_file_size);
+	r.Fmt("size: {}\n", art_file_size);
 
 	r.WriteBinary({buffer.get(), read_size});
 
@@ -330,10 +330,10 @@
 			return;
 		}
 
-		response.Fmt(FMT_STRING("size: {}\n"), buffer.size());
+		response.Fmt("size: {}\n", buffer.size());
 
 		if (mime_type != nullptr)
-			response.Fmt(FMT_STRING("type: {}\n"), mime_type);
+			response.Fmt("type: {}\n", mime_type);
 
 		buffer = buffer.subspan(offset);
 
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/command/FingerprintCommands.cxx mpd-sacd.git-libfmt-v11-patch/src/command/FingerprintCommands.cxx
--- mpd-sacd.git.orig/src/command/FingerprintCommands.cxx	2025-01-27 20:31:20.401730503 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/command/FingerprintCommands.cxx	2025-01-27 21:32:54.373688547 +0800
@@ -46,7 +46,7 @@
 	void Run() override;
 
 	void SendResponse(Response &r) noexcept override {
-		r.Fmt(FMT_STRING("chromaprint: {}\n"),
+		r.Fmt("chromaprint: {}\n",
 		      GetFingerprint());
 	}
 
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/command/MessageCommands.cxx mpd-sacd.git-libfmt-v11-patch/src/command/MessageCommands.cxx
--- mpd-sacd.git.orig/src/command/MessageCommands.cxx	2025-01-27 20:31:20.401730503 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/command/MessageCommands.cxx	2025-01-27 21:09:35.878420767 +0800
@@ -70,7 +70,7 @@
 	}
 
 	for (const auto &channel : channels)
-		r.Fmt(FMT_STRING("channel: {}\n"), channel);
+		r.Fmt("channel: {}\n", channel);
 
 	return CommandResult::OK;
 }
@@ -82,7 +82,7 @@
 	assert(args.empty());
 
 	client.ConsumeMessages([&r](const auto &msg){
-		r.Fmt(FMT_STRING("channel: {}\nmessage: {}\n"),
+		r.Fmt("channel: {}\nmessage: {}\n",
 		      msg.GetChannel(), msg.GetMessage());
 	});
 
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/command/NeighborCommands.cxx mpd-sacd.git-libfmt-v11-patch/src/command/NeighborCommands.cxx
--- mpd-sacd.git.orig/src/command/NeighborCommands.cxx	2025-01-27 20:31:20.401730503 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/command/NeighborCommands.cxx	2025-01-27 21:33:41.550319526 +0800
@@ -30,8 +30,8 @@
 	}
 
 	for (const auto &i : neighbors->GetList())
-		r.Fmt(FMT_STRING("neighbor: {}\n"
-				 "name: {}\n"),
+		r.Fmt("neighbor: {}\n"
+				 "name: {}\n",
 		      i.uri,
 		      i.display_name);
 	return CommandResult::OK;
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/command/OtherCommands.cxx mpd-sacd.git-libfmt-v11-patch/src/command/OtherCommands.cxx
--- mpd-sacd.git.orig/src/command/OtherCommands.cxx	2025-01-27 20:31:20.401730503 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/command/OtherCommands.cxx	2025-01-27 21:11:23.304948998 +0800
@@ -46,7 +46,7 @@
 print_spl_list(Response &r, const PlaylistVector &list)
 {
 	for (const auto &i : list) {
-		r.Fmt(FMT_STRING("playlist: {}\n"), i.name);
+		r.Fmt("playlist: {}\n", i.name);
 
 		if (!IsNegative(i.mtime))
 			time_print(r, "Last-Modified", i.mtime);
@@ -233,7 +233,7 @@
 	      const char *uri_utf8, bool discard)
 {
 	unsigned ret = update.Enqueue(uri_utf8, discard);
-	r.Fmt(FMT_STRING("updating_db: {}\n"), ret);
+	r.Fmt("updating_db: {}\n", ret);
 	return CommandResult::OK;
 }
 
@@ -243,7 +243,7 @@
 {
 	unsigned id = db.Update(uri_utf8, discard);
 	if (id > 0) {
-		r.Fmt(FMT_STRING("updating_db: {}\n"), id);
+		r.Fmt("updating_db: {}\n", id);
 		return CommandResult::OK;
 	} else {
 		/* Database::Update() has returned 0 without setting
@@ -308,7 +308,7 @@
 
 	const auto volume = partition.mixer_memento.GetVolume(partition.outputs);
 	if (volume >= 0)
-		r.Fmt(FMT_STRING("volume: {}\n"), volume);
+		r.Fmt("volume: {}\n", volume);
 
 	return CommandResult::OK;
 }
@@ -372,12 +372,12 @@
 #ifdef ENABLE_DATABASE
 	if (const Storage *storage = client.GetStorage()) {
 		const auto path = storage->MapUTF8("");
-		r.Fmt(FMT_STRING("music_directory: {}\n"), path);
+		r.Fmt("music_directory: {}\n", path);
 	}
 #endif
 
 	if (const auto spl_path = map_spl_path(); !spl_path.IsNull())
-		r.Fmt(FMT_STRING("playlist_directory: {}\n"), spl_path.ToUTF8());
+		r.Fmt("playlist_directory: {}\n", spl_path.ToUTF8());
 
 #ifdef HAVE_PCRE
 	r.Write("pcre: 1\n");
@@ -394,7 +394,7 @@
 		unsigned event = idle_parse_name(i);
 		if (event == 0) {
 			r.FmtError(ACK_ERROR_ARG,
-				   FMT_STRING("Unrecognized idle event: {}"),
+				   "Unrecognized idle event: {}",
 				   i);
 			return CommandResult::ERROR;
 		}
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/command/PartitionCommands.cxx mpd-sacd.git-libfmt-v11-patch/src/command/PartitionCommands.cxx
--- mpd-sacd.git.orig/src/command/PartitionCommands.cxx	2025-01-27 20:31:20.401730503 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/command/PartitionCommands.cxx	2025-01-27 21:12:20.711541763 +0800
@@ -32,7 +32,7 @@
 handle_listpartitions(Client &client, Request, Response &r)
 {
 	for (const auto &partition : client.GetInstance().partitions) {
-		r.Fmt(FMT_STRING("partition: {}\n"), partition.name);
+		r.Fmt("partition: {}\n", partition.name);
 	}
 
 	return CommandResult::OK;
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/command/PlayerCommands.cxx mpd-sacd.git-libfmt-v11-patch/src/command/PlayerCommands.cxx
--- mpd-sacd.git.orig/src/command/PlayerCommands.cxx	2025-01-27 20:31:20.405063829 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/command/PlayerCommands.cxx	2025-01-27 21:15:11.854655025 +0800
@@ -118,9 +118,9 @@
 
 	const auto volume = partition.mixer_memento.GetVolume(partition.outputs);
 	if (volume >= 0)
-		r.Fmt(FMT_STRING("volume: {}\n"), volume);
+		r.Fmt("volume: {}\n", volume);
 
-	r.Fmt(FMT_STRING(COMMAND_STATUS_REPEAT ": {}\n"
+	r.Fmt(COMMAND_STATUS_REPEAT ": {}\n"
 			 COMMAND_STATUS_RANDOM ": {}\n"
 			 COMMAND_STATUS_SINGLE ": {}\n"
 			 COMMAND_STATUS_CONSUME ": {}\n"
@@ -128,7 +128,7 @@
 			 COMMAND_STATUS_PLAYLIST ": {}\n"
 			 COMMAND_STATUS_PLAYLIST_LENGTH ": {}\n"
 			 COMMAND_STATUS_MIXRAMPDB ": {}\n"
-			 COMMAND_STATUS_STATE ": {}\n"),
+			 COMMAND_STATUS_STATE ": {}\n",
 	      (unsigned)playlist.GetRepeat(),
 	      (unsigned)playlist.GetRandom(),
 	      SingleToString(playlist.GetSingle()),
@@ -140,24 +140,24 @@
 	      state);
 
 	if (pc.GetCrossFade() > FloatDuration::zero())
-		r.Fmt(FMT_STRING(COMMAND_STATUS_CROSSFADE ": {}\n"),
+		r.Fmt(COMMAND_STATUS_CROSSFADE ": {}\n",
 		      lround(pc.GetCrossFade().count()));
 
 	if (pc.GetMixRampDelay() > FloatDuration::zero())
-		r.Fmt(FMT_STRING(COMMAND_STATUS_MIXRAMPDELAY ": {}\n"),
+		r.Fmt(COMMAND_STATUS_MIXRAMPDELAY ": {}\n",
 		      pc.GetMixRampDelay().count());
 
 	song = playlist.GetCurrentPosition();
 	if (song >= 0) {
-		r.Fmt(FMT_STRING(COMMAND_STATUS_SONG ": {}\n"
-				 COMMAND_STATUS_SONGID ": {}\n"),
+		r.Fmt(COMMAND_STATUS_SONG ": {}\n"
+				 COMMAND_STATUS_SONGID ": {}\n",
 		      song, playlist.PositionToId(song));
 	}
 
 	if (player_status.state != PlayerState::STOP) {
-		r.Fmt(FMT_STRING(COMMAND_STATUS_TIME ": {}:{}\n"
+		r.Fmt(COMMAND_STATUS_TIME ": {}:{}\n"
 				 "elapsed: {:1.3f}\n"
-				 COMMAND_STATUS_BITRATE ": {}\n"),
+				 COMMAND_STATUS_BITRATE ": {}\n",
 		      player_status.elapsed_time.RoundS(),
 		      player_status.total_time.IsNegative()
 		      ? 0U
@@ -166,11 +166,11 @@
 		      player_status.bit_rate);
 
 		if (!player_status.total_time.IsNegative())
-			r.Fmt(FMT_STRING("duration: {:1.3f}\n"),
+			r.Fmt("duration: {:1.3f}\n",
 				 player_status.total_time.ToDoubleS());
 
 		if (player_status.audio_format.IsDefined())
-			r.Fmt(FMT_STRING(COMMAND_STATUS_AUDIO ": {}\n"),
+			r.Fmt(COMMAND_STATUS_AUDIO ": {}\n",
 			      player_status.audio_format);
 	}
 
@@ -180,7 +180,7 @@
 		? update_service->GetId()
 		: 0;
 	if (updateJobId != 0) {
-		r.Fmt(FMT_STRING(COMMAND_STATUS_UPDATING_DB ": {}\n"),
+		r.Fmt(COMMAND_STATUS_UPDATING_DB ": {}\n",
 		      updateJobId);
 	}
 #endif
@@ -188,14 +188,14 @@
 	try {
 		pc.LockCheckRethrowError();
 	} catch (...) {
-		r.Fmt(FMT_STRING(COMMAND_STATUS_ERROR ": {}\n"),
+		r.Fmt(COMMAND_STATUS_ERROR ": {}\n",
 		      GetFullMessage(std::current_exception()));
 	}
 
 	song = playlist.GetNextPosition();
 	if (song >= 0)
-		r.Fmt(FMT_STRING(COMMAND_STATUS_NEXTSONG ": {}\n"
-				 COMMAND_STATUS_NEXTSONGID ": {}\n"),
+		r.Fmt(COMMAND_STATUS_NEXTSONG ": {}\n"
+				 COMMAND_STATUS_NEXTSONGID ": {}\n",
 		      song, playlist.PositionToId(song));
 
 	return CommandResult::OK;
@@ -338,7 +338,7 @@
 handle_replay_gain_status(Client &client, [[maybe_unused]] Request args,
 			  Response &r)
 {
-	r.Fmt(FMT_STRING("replay_gain_mode: {}\n"),
+	r.Fmt("replay_gain_mode: {}\n",
 	      ToString(client.GetPartition().replay_gain_mode));
 	return CommandResult::OK;
 }
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/command/PlaylistCommands.cxx mpd-sacd.git-libfmt-v11-patch/src/command/PlaylistCommands.cxx
--- mpd-sacd.git.orig/src/command/PlaylistCommands.cxx	2025-01-27 20:31:20.405063829 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/command/PlaylistCommands.cxx	2025-01-27 21:16:33.454550200 +0800
@@ -40,7 +40,7 @@
 print_spl_list(Response &r, const PlaylistVector &list)
 {
 	for (const auto &i : list) {
-		r.Fmt(FMT_STRING("playlist: {}\n"), i.name);
+		r.Fmt("playlist: {}\n", i.name);
 
 		if (!IsNegative(i.mtime))
 			time_print(r, "Last-Modified", i.mtime);
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/command/QueueCommands.cxx mpd-sacd.git-libfmt-v11-patch/src/command/QueueCommands.cxx
--- mpd-sacd.git.orig/src/command/QueueCommands.cxx	2025-01-27 20:31:20.405063829 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/command/QueueCommands.cxx	2025-01-27 21:17:30.597810164 +0800
@@ -140,7 +140,7 @@
 
 	partition.instance.LookupRemoteTag(uri);
 
-	r.Fmt(FMT_STRING("Id: {}\n"), added_id);
+	r.Fmt("Id: {}\n", added_id);
 	return CommandResult::OK;
 }
 
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/command/StorageCommands.cxx mpd-sacd.git-libfmt-v11-patch/src/command/StorageCommands.cxx
--- mpd-sacd.git.orig/src/command/StorageCommands.cxx	2025-01-27 20:31:20.405063829 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/command/StorageCommands.cxx	2025-01-27 21:18:40.917719906 +0800
@@ -50,14 +50,14 @@
 			continue;
 
 		case StorageFileInfo::Type::REGULAR:
-			r.Fmt(FMT_STRING("file: {}\n"
-					 "size: {}\n"),
+			r.Fmt("file: {}\n"
+					 "size: {}\n",
 			      name_utf8,
 			      info.size);
 			break;
 
 		case StorageFileInfo::Type::DIRECTORY:
-			r.Fmt(FMT_STRING("directory: {}\n"), name_utf8);
+			r.Fmt("directory: {}\n", name_utf8);
 			break;
 		}
 
@@ -110,7 +110,7 @@
 			uri = std::move(allocated);
 	}
 
-	r.Fmt(FMT_STRING("storage: {}\n"), uri);
+	r.Fmt("storage: {}\n", uri);
 }
 
 CommandResult
@@ -126,7 +126,7 @@
 
 	const auto visitor = [&client, &r](const char *mount_uri,
 					   const Storage &storage){
-		r.Fmt(FMT_STRING("mount: {}\n"), mount_uri);
+		r.Fmt("mount: {}\n", mount_uri);
 		print_storage_uri(client, r, storage);
 	};
 
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/command/TagCommands.cxx mpd-sacd.git-libfmt-v11-patch/src/command/TagCommands.cxx
--- mpd-sacd.git.orig/src/command/TagCommands.cxx	2025-01-27 20:31:20.405063829 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/command/TagCommands.cxx	2025-01-27 21:19:47.334301355 +0800
@@ -19,7 +19,7 @@
 	const char *const tag_name = args[1];
 	const TagType tag_type = tag_name_parse_i(tag_name);
 	if (tag_type == TAG_NUM_OF_ITEM_TYPES) {
-		r.FmtError(ACK_ERROR_ARG, FMT_STRING("Unknown tag type: {}"),
+		r.FmtError(ACK_ERROR_ARG, "Unknown tag type: {}",
 			   tag_name);
 		return CommandResult::ERROR;
 	}
@@ -41,7 +41,7 @@
 		tag_type = tag_name_parse_i(tag_name);
 		if (tag_type == TAG_NUM_OF_ITEM_TYPES) {
 			r.FmtError(ACK_ERROR_ARG,
-				   FMT_STRING("Unknown tag type: {}"),
+				   "Unknown tag type: {}",
 				   tag_name);
 			return CommandResult::ERROR;
 		}
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/db/Count.cxx mpd-sacd.git-libfmt-v11-patch/src/db/Count.cxx
--- mpd-sacd.git.orig/src/db/Count.cxx	2025-01-27 20:31:20.405063829 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/db/Count.cxx	2025-01-27 21:20:54.744214888 +0800
@@ -33,8 +33,8 @@
 	unsigned total_duration_s =
 		std::chrono::duration_cast<std::chrono::seconds>(stats.total_duration).count();
 
-	r.Fmt(FMT_STRING("songs: {}\n"
-			 "playtime: {}\n"),
+	r.Fmt("songs: {}\n"
+			 "playtime: {}\n",
 	      stats.n_songs, total_duration_s);
 }
 
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/db/DatabasePrint.cxx mpd-sacd.git-libfmt-v11-patch/src/db/DatabasePrint.cxx
--- mpd-sacd.git.orig/src/db/DatabasePrint.cxx	2025-01-27 20:31:20.405063829 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/db/DatabasePrint.cxx	2025-01-27 21:22:25.367432014 +0800
@@ -34,7 +34,7 @@
 PrintDirectoryURI(Response &r, bool base,
 		  const LightDirectory &directory) noexcept
 {
-	r.Fmt(FMT_STRING("directory: {}\n"),
+	r.Fmt("directory: {}\n",
 	      ApplyBaseFlag(directory.GetPath(), base));
 }
 
@@ -64,10 +64,10 @@
 			    const char *name_utf8) noexcept
 {
 	if (base || directory == nullptr)
-		r.Fmt(FMT_STRING("playlist: {}\n"),
+		r.Fmt("playlist: {}\n",
 		      ApplyBaseFlag(name_utf8, base));
 	else
-		r.Fmt(FMT_STRING("playlist: {}/{}\n"),
+		r.Fmt("playlist: {}/{}\n",
 		      directory, name_utf8);
 }
 
@@ -77,9 +77,9 @@
 			    const char *name_utf8) noexcept
 {
 	if (base || directory == nullptr || directory->IsRoot())
-		r.Fmt(FMT_STRING("playlist: {}\n"), name_utf8);
+		r.Fmt("playlist: {}\n", name_utf8);
 	else
-		r.Fmt(FMT_STRING("playlist: {}/{}\n"),
+		r.Fmt("playlist: {}/{}\n",
 		      directory->GetPath(), name_utf8);
 }
 
@@ -183,7 +183,7 @@
 	tag_types = tag_types.subspan(1);
 
 	for (const auto &[key, tag] : map) {
-		r.Fmt(FMT_STRING("{}: {}\n"), name, key);
+		r.Fmt("{}: {}\n", name, key);
 
 		if (!tag_types.empty())
 			PrintUniqueTags(r, tag_types, tag);
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/db/plugins/simple/DatabaseSave.cxx mpd-sacd.git-libfmt-v11-patch/src/db/plugins/simple/DatabaseSave.cxx
--- mpd-sacd.git.orig/src/db/plugins/simple/DatabaseSave.cxx	2025-01-27 20:31:20.408397155 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/db/plugins/simple/DatabaseSave.cxx	2025-01-27 21:47:46.489504346 +0800
@@ -37,13 +37,13 @@
 db_save_internal(BufferedOutputStream &os, const Directory &music_root)
 {
 	os.Write(DIRECTORY_INFO_BEGIN "\n");
-	os.Fmt(FMT_STRING(DB_FORMAT_PREFIX "{}\n"), DB_FORMAT);
+	os.Fmt(DB_FORMAT_PREFIX "{}\n", DB_FORMAT);
 	os.Write(DIRECTORY_MPD_VERSION VERSION "\n");
-	os.Fmt(FMT_STRING(DIRECTORY_FS_CHARSET "{}\n"), GetFSCharset());
+	os.Fmt(DIRECTORY_FS_CHARSET "{}\n", GetFSCharset());
 
 	for (unsigned i = 0; i < TAG_NUM_OF_ITEM_TYPES; ++i)
 		if (IsTagEnabled(i))
-			os.Fmt(FMT_STRING(DB_TAG_PREFIX "{}\n"),
+			os.Fmt(DB_TAG_PREFIX "{}\n",
 			       tag_item_names[i]);
 
 	os.Write(DIRECTORY_INFO_END "\n");
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/db/plugins/simple/DirectorySave.cxx mpd-sacd.git-libfmt-v11-patch/src/db/plugins/simple/DirectorySave.cxx
--- mpd-sacd.git.orig/src/db/plugins/simple/DirectorySave.cxx	2025-01-27 20:31:20.408397155 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/db/plugins/simple/DirectorySave.cxx	2025-01-27 21:46:59.392888206 +0800
@@ -64,20 +64,20 @@
 	if (!directory.IsRoot()) {
 		const char *type = DeviceToTypeString(directory.device);
 		if (type != nullptr)
-			os.Fmt(FMT_STRING(DIRECTORY_TYPE "{}\n"), type);
+			os.Fmt(DIRECTORY_TYPE "{}\n", type);
 
 		if (!IsNegative(directory.mtime))
-			os.Fmt(FMT_STRING(DIRECTORY_MTIME "{}\n"),
+			os.Fmt(DIRECTORY_MTIME "{}\n",
 			       std::chrono::system_clock::to_time_t(directory.mtime));
 
-		os.Fmt(FMT_STRING(DIRECTORY_BEGIN "{}\n"), directory.GetPath());
+		os.Fmt(DIRECTORY_BEGIN "{}\n", directory.GetPath());
 	}
 
 	for (const auto &child : directory.children) {
 		if (child.IsMount())
 			continue;
 
-		os.Fmt(FMT_STRING(DIRECTORY_DIR "{}\n"), child.GetName());
+		os.Fmt(DIRECTORY_DIR "{}\n", child.GetName());
 		directory_save(os, child);
 	}
 
@@ -87,7 +87,7 @@
 	playlist_vector_save(os, directory.playlists);
 
 	if (!directory.IsRoot())
-		os.Fmt(FMT_STRING(DIRECTORY_END "{}\n"), directory.GetPath());
+		os.Fmt(DIRECTORY_END "{}\n", directory.GetPath());
 }
 
 static bool
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/decoder/DecoderPrint.cxx mpd-sacd.git-libfmt-v11-patch/src/decoder/DecoderPrint.cxx
--- mpd-sacd.git.orig/src/decoder/DecoderPrint.cxx	2025-01-27 20:31:20.411730482 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/decoder/DecoderPrint.cxx	2025-01-27 21:23:35.670675218 +0800
@@ -19,19 +19,19 @@
 
 	assert(plugin.name != nullptr);
 
-	r.Fmt(FMT_STRING("plugin: {}\n"), plugin.name);
+	r.Fmt("plugin: {}\n", plugin.name);
 
 	if (plugin.suffixes != nullptr)
 		for (p = plugin.suffixes; *p != nullptr; ++p)
-			r.Fmt(FMT_STRING("suffix: {}\n"), *p);
+			r.Fmt("suffix: {}\n", *p);
 
 	if (plugin.suffixes_function != nullptr)
 		for (const auto &i : plugin.suffixes_function())
-			r.Fmt(FMT_STRING("suffix: {}\n"), i);
+			r.Fmt("suffix: {}\n", i);
 
 	if (plugin.mime_types != nullptr)
 		for (p = plugin.mime_types; *p != nullptr; ++p)
-			r.Fmt(FMT_STRING("mime_type: {}\n"), *p);
+			r.Fmt("mime_type: {}\n", *p);
 }
 
 void
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/decoder/plugins/meson.build mpd-sacd.git-libfmt-v11-patch/src/decoder/plugins/meson.build
--- mpd-sacd.git.orig/src/decoder/plugins/meson.build	2025-01-27 20:31:20.415063809 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/decoder/plugins/meson.build	2025-01-27 21:26:11.863899385 +0800
@@ -130,7 +130,7 @@
   ]
 endif
 
-libopenmpt_dep = dependency('libopenmpt', required: get_option('openmpt'))
+libopenmpt_dep = dependency('libopenmpt', required: get_option('openmpt'), static: true)
 decoder_features.set('ENABLE_OPENMPT', libopenmpt_dep.found())
 if libopenmpt_dep.found()
   decoder_plugins_sources += [
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/lib/ffmpeg/LibFmt.hxx mpd-sacd.git-libfmt-v11-patch/src/lib/ffmpeg/LibFmt.hxx
--- mpd-sacd.git.orig/src/lib/ffmpeg/LibFmt.hxx	2025-01-27 20:31:20.435063768 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/lib/ffmpeg/LibFmt.hxx	2025-01-27 20:42:01.423975724 +0800
@@ -13,7 +13,7 @@
 struct fmt::formatter<AVSampleFormat> : formatter<string_view>
 {
 	template<typename FormatContext>
-	auto format(const AVSampleFormat format, FormatContext &ctx) {
+	auto format(const AVSampleFormat format, FormatContext &ctx) const {
 		const char *name = av_get_sample_fmt_name(format);
 		if (name == nullptr)
 			name = "?";
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/lib/fmt/AudioFormatFormatter.hxx mpd-sacd.git-libfmt-v11-patch/src/lib/fmt/AudioFormatFormatter.hxx
--- mpd-sacd.git.orig/src/lib/fmt/AudioFormatFormatter.hxx	2025-01-27 20:31:20.435063768 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/lib/fmt/AudioFormatFormatter.hxx	2025-01-27 20:43:42.977160407 +0800
@@ -13,7 +13,7 @@
 struct fmt::formatter<SampleFormat> : formatter<string_view>
 {
 	template<typename FormatContext>
-	auto format(const SampleFormat format, FormatContext &ctx) {
+	auto format(const SampleFormat format, FormatContext &ctx) const {
 		return formatter<string_view>::format(sample_format_to_string(format),
 						      ctx);
 	}
@@ -23,7 +23,7 @@
 struct fmt::formatter<AudioFormat> : formatter<string_view>
 {
 	template<typename FormatContext>
-	auto format(const AudioFormat &af, FormatContext &ctx) {
+	auto format(const AudioFormat &af, FormatContext &ctx) const {
 		return formatter<string_view>::format(ToString(af).c_str(),
 						      ctx);
 	}
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/lib/fmt/ExceptionFormatter.hxx mpd-sacd.git-libfmt-v11-patch/src/lib/fmt/ExceptionFormatter.hxx
--- mpd-sacd.git.orig/src/lib/fmt/ExceptionFormatter.hxx	2025-01-27 20:31:20.435063768 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/lib/fmt/ExceptionFormatter.hxx	2025-01-27 20:45:08.147038497 +0800
@@ -12,7 +12,7 @@
 struct fmt::formatter<std::exception_ptr> : formatter<string_view>
 {
 	template<typename FormatContext>
-	auto format(std::exception_ptr e, FormatContext &ctx) {
+	auto format(std::exception_ptr e, FormatContext &ctx) const {
 		return formatter<string_view>::format(GetFullMessage(e), ctx);
 	}
 };
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/lib/fmt/PathFormatter.hxx mpd-sacd.git-libfmt-v11-patch/src/lib/fmt/PathFormatter.hxx
--- mpd-sacd.git.orig/src/lib/fmt/PathFormatter.hxx	2025-01-27 20:31:20.435063768 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/lib/fmt/PathFormatter.hxx	2025-01-27 20:46:47.616898776 +0800
@@ -13,7 +13,7 @@
 struct fmt::formatter<Path> : formatter<string_view>
 {
 	template<typename FormatContext>
-	auto format(Path path, FormatContext &ctx) {
+	auto format(Path path, FormatContext &ctx) const {
 		return formatter<string_view>::format(path.ToUTF8(), ctx);
 	}
 };
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/lib/icu/Converter.cxx mpd-sacd.git-libfmt-v11-patch/src/lib/icu/Converter.cxx
--- mpd-sacd.git.orig/src/lib/icu/Converter.cxx	2025-01-27 20:31:20.435063768 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/lib/icu/Converter.cxx	2025-01-27 21:43:47.896423093 +0800
@@ -41,7 +41,7 @@
 	UConverter *converter = ucnv_open(charset, &code);
 	if (converter == nullptr)
 		throw ICU::MakeError(code,
-				     FmtBuffer<256>(FMT_STRING("Failed to initialize charset '{}'"),
+				     FmtBuffer<256>("Failed to initialize charset '{}'",
 						    charset));
 
 	return std::unique_ptr<IcuConverter>(new IcuConverter(converter));
@@ -54,7 +54,7 @@
 			iconv_close(to);
 		if (from != (iconv_t)-1)
 			iconv_close(from);
-		throw FmtErrno(e, FMT_STRING("Failed to initialize charset '{}'"),
+		throw FmtErrno(e, "Failed to initialize charset '{}'",
 			       charset);
 	}
 
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/ls.cxx mpd-sacd.git-libfmt-v11-patch/src/ls.cxx
--- mpd-sacd.git.orig/src/ls.cxx	2025-01-27 20:31:20.441730422 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/ls.cxx	2025-01-27 21:27:12.853881192 +0800
@@ -52,7 +52,7 @@
 	});
 
 	for (const auto& protocol : protocols) {
-		r.Fmt(FMT_STRING("handler: {}\n"), protocol);
+		r.Fmt("handler: {}\n", protocol);
 	}
 }
 
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/mixer/Memento.cxx mpd-sacd.git-libfmt-v11-patch/src/mixer/Memento.cxx
--- mpd-sacd.git.orig/src/mixer/Memento.cxx	2025-01-27 20:31:20.441730422 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/mixer/Memento.cxx	2025-01-27 21:39:53.993324321 +0800
@@ -77,5 +77,5 @@
 void
 MixerMemento::SaveSoftwareVolumeState(BufferedOutputStream &os) const
 {
-	os.Fmt(FMT_STRING(SW_VOLUME_STATE "{}\n"), volume_software_set);
+	os.Fmt(SW_VOLUME_STATE "{}\n", volume_software_set);
 }
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/output/plugins/PipeWireOutputPlugin.cxx mpd-sacd.git-libfmt-v11-patch/src/output/plugins/PipeWireOutputPlugin.cxx
--- mpd-sacd.git.orig/src/output/plugins/PipeWireOutputPlugin.cxx	2025-01-27 20:31:20.448397075 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/output/plugins/PipeWireOutputPlugin.cxx	2025-01-27 21:35:04.016920066 +0800
@@ -666,7 +666,7 @@
 				::SetVolume(*stream, channels, volume);
 			} catch (...) {
 				FmtError(pipewire_output_domain,
-					 FMT_STRING("Failed to restore volume: {}"),
+					 "Failed to restore volume: {}",
 					 std::current_exception());
 			}
 		}
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/output/Print.cxx mpd-sacd.git-libfmt-v11-patch/src/output/Print.cxx
--- mpd-sacd.git.orig/src/output/Print.cxx	2025-01-27 20:31:20.445063748 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/output/Print.cxx	2025-01-27 21:28:11.820524750 +0800
@@ -18,16 +18,16 @@
 	for (unsigned i = 0, n = outputs.Size(); i != n; ++i) {
 		const auto &ao = outputs.Get(i);
 
-		r.Fmt(FMT_STRING("outputid: {}\n"
+		r.Fmt("outputid: {}\n"
 				 "outputname: {}\n"
 				 "plugin: {}\n"
-				 "outputenabled: {}\n"),
+				 "outputenabled: {}\n",
 		      i,
 		      ao.GetName(), ao.GetPluginName(),
 		      (unsigned)ao.IsEnabled());
 
 		for (const auto &[attribute, value] : ao.GetAttributes())
-			r.Fmt(FMT_STRING("attribute: {}={}\n"),
+			r.Fmt("attribute: {}={}\n",
 			      attribute, value);
 	}
 }
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/output/State.cxx mpd-sacd.git-libfmt-v11-patch/src/output/State.cxx
--- mpd-sacd.git.orig/src/output/State.cxx	2025-01-27 20:31:20.445063748 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/output/State.cxx	2025-01-27 21:45:30.896315522 +0800
@@ -29,7 +29,7 @@
 		const auto &ao = outputs.Get(i);
 		const std::scoped_lock<Mutex> lock(ao.mutex);
 
-		os.Fmt(FMT_STRING(AUDIO_DEVICE_STATE "{}:{}\n"),
+		os.Fmt(AUDIO_DEVICE_STATE "{}:{}\n",
 		       (unsigned)ao.IsEnabled(), ao.GetName());
 	}
 }
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/PlaylistDatabase.cxx mpd-sacd.git-libfmt-v11-patch/src/PlaylistDatabase.cxx
--- mpd-sacd.git.orig/src/PlaylistDatabase.cxx	2025-01-27 20:31:20.398397175 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/PlaylistDatabase.cxx	2025-01-27 21:58:33.312121390 +0800
@@ -19,9 +19,9 @@
 playlist_vector_save(BufferedOutputStream &os, const PlaylistVector &pv)
 {
 	for (const PlaylistInfo &pi : pv) {
-		os.Fmt(FMT_STRING(PLAYLIST_META_BEGIN "{}\n"), pi.name);
+		os.Fmt(PLAYLIST_META_BEGIN "{}\n", pi.name);
 		if (!IsNegative(pi.mtime))
-			os.Fmt(FMT_STRING("mtime: {}\n"),
+			os.Fmt("mtime: {}\n",
 			       std::chrono::system_clock::to_time_t(pi.mtime));
 		os.Write("playlist_end\n");
 	}
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/PlaylistSave.cxx mpd-sacd.git-libfmt-v11-patch/src/PlaylistSave.cxx
--- mpd-sacd.git.orig/src/PlaylistSave.cxx	2025-01-27 20:31:20.398397175 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/PlaylistSave.cxx	2025-01-27 21:57:37.402184394 +0800
@@ -26,11 +26,11 @@
 	   "narrow" charset (i.e. CP_ACP) is incapable of storing all
 	   Unicode paths */
 	try {
-		os.Fmt(FMT_STRING("{}\n"), path.ToUTF8Throw());
+		os.Fmt("{}\n", path.ToUTF8Throw());
 	} catch (...) {
 	}
 #else
-	os.Fmt(FMT_STRING("{}\n"), path.c_str());
+	os.Fmt("{}\n", path.c_str());
 #endif
 }
 
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/queue/PlaylistState.cxx mpd-sacd.git-libfmt-v11-patch/src/queue/PlaylistState.cxx
--- mpd-sacd.git.orig/src/queue/PlaylistState.cxx	2025-01-27 20:31:20.455063727 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/queue/PlaylistState.cxx	2025-01-27 21:42:29.383170167 +0800
@@ -59,31 +59,31 @@
 		default:
 			os.Write(PLAYLIST_STATE_FILE_STATE_PLAY "\n");
 		}
-		os.Fmt(FMT_STRING(PLAYLIST_STATE_FILE_CURRENT "{}\n"),
+		os.Fmt(PLAYLIST_STATE_FILE_CURRENT "{}\n",
 		       playlist.queue.OrderToPosition(playlist.current));
-		os.Fmt(FMT_STRING(PLAYLIST_STATE_FILE_TIME "{}\n"),
+		os.Fmt(PLAYLIST_STATE_FILE_TIME "{}\n",
 		       player_status.elapsed_time.ToDoubleS());
 	} else {
 		os.Write(PLAYLIST_STATE_FILE_STATE_STOP "\n");
 
 		if (playlist.current >= 0)
-			os.Fmt(FMT_STRING(PLAYLIST_STATE_FILE_CURRENT "{}\n"),
+			os.Fmt(PLAYLIST_STATE_FILE_CURRENT "{}\n",
 			       playlist.queue.OrderToPosition(playlist.current));
 	}
 
-	os.Fmt(FMT_STRING(PLAYLIST_STATE_FILE_RANDOM "{}\n"),
+	os.Fmt(PLAYLIST_STATE_FILE_RANDOM "{}\n",
 	       (unsigned)playlist.queue.random);
-	os.Fmt(FMT_STRING(PLAYLIST_STATE_FILE_REPEAT "{}\n"),
+	os.Fmt(PLAYLIST_STATE_FILE_REPEAT "{}\n",
 	       (unsigned)playlist.queue.repeat);
-	os.Fmt(FMT_STRING(PLAYLIST_STATE_FILE_SINGLE "{}\n"),
+	os.Fmt(PLAYLIST_STATE_FILE_SINGLE "{}\n",
 		   (unsigned)playlist.queue.single);
-	os.Fmt(FMT_STRING(PLAYLIST_STATE_FILE_CONSUME "{}\n"),
+	os.Fmt(PLAYLIST_STATE_FILE_CONSUME "{}\n",
 	       (unsigned)playlist.queue.consume);
-	os.Fmt(FMT_STRING(PLAYLIST_STATE_FILE_CROSSFADE "{}\n"),
+	os.Fmt(PLAYLIST_STATE_FILE_CROSSFADE "{}\n",
 	       pc.GetCrossFade().count());
-	os.Fmt(FMT_STRING(PLAYLIST_STATE_FILE_MIXRAMPDB "{}\n"),
+	os.Fmt(PLAYLIST_STATE_FILE_MIXRAMPDB "{}\n",
 	       pc.GetMixRampDb());
-	os.Fmt(FMT_STRING(PLAYLIST_STATE_FILE_MIXRAMPDELAY "{}\n"),
+	os.Fmt(PLAYLIST_STATE_FILE_MIXRAMPDELAY "{}\n",
 	       pc.GetMixRampDelay().count());
 	os.Write(PLAYLIST_STATE_FILE_PLAYLIST_BEGIN "\n");
 	queue_save(os, playlist.queue);
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/queue/Print.cxx mpd-sacd.git-libfmt-v11-patch/src/queue/Print.cxx
--- mpd-sacd.git.orig/src/queue/Print.cxx	2025-01-27 20:31:20.455063727 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/queue/Print.cxx	2025-01-27 21:29:51.800474722 +0800
@@ -29,12 +29,12 @@
 		      unsigned position)
 {
 	song_print_info(r, queue.Get(position));
-	r.Fmt(FMT_STRING("Pos: {}\nId: {}\n"),
+	r.Fmt("Pos: {}\nId: {}\n",
 	      position, queue.PositionToId(position));
 
 	uint8_t priority = queue.GetPriorityAtPosition(position);
 	if (priority != 0)
-		r.Fmt(FMT_STRING("Prio: {}\n"), priority);
+		r.Fmt("Prio: {}\n", priority);
 }
 
 void
@@ -56,7 +56,7 @@
 	assert(end <= queue.GetLength());
 
 	for (unsigned i = start; i < end; ++i) {
-		r.Fmt(FMT_STRING("{}:"), i);
+		r.Fmt("{}:", i);
 		song_print_uri(r, queue.Get(i));
 	}
 }
@@ -84,7 +84,7 @@
 
 	for (unsigned i = start; i < end; i++)
 		if (queue.IsNewerAtPosition(i, version))
-			r.Fmt(FMT_STRING("cpos: {}\nId: {}\n"),
+			r.Fmt("cpos: {}\nId: {}\n",
 			      i, queue.PositionToId(i));
 }
 
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/queue/Save.cxx mpd-sacd.git-libfmt-v11-patch/src/queue/Save.cxx
--- mpd-sacd.git.orig/src/queue/Save.cxx	2025-01-27 20:31:20.455063727 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/queue/Save.cxx	2025-01-27 21:56:56.432230463 +0800
@@ -24,7 +24,7 @@
 queue_save_database_song(BufferedOutputStream &os,
 			 int idx, const DetachedSong &song)
 {
-	os.Fmt(FMT_STRING("{}:{}\n"), idx, song.GetURI());
+	os.Fmt("{}:{}\n", idx, song.GetURI());
 }
 
 static void
@@ -53,7 +53,7 @@
 	for (unsigned i = 0; i < queue.GetLength(); i++) {
 		uint8_t prio = queue.GetPriorityAtPosition(i);
 		if (prio != 0)
-			os.Fmt(FMT_STRING(PRIO_LABEL "{}\n"), prio);
+			os.Fmt(PRIO_LABEL "{}\n", prio);
 
 		queue_save_song(os, i, queue.Get(i));
 	}
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/song/PrioritySongFilter.cxx mpd-sacd.git-libfmt-v11-patch/src/song/PrioritySongFilter.cxx
--- mpd-sacd.git.orig/src/song/PrioritySongFilter.cxx	2025-01-27 20:31:20.458397055 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/song/PrioritySongFilter.cxx	2025-01-27 21:39:09.800033374 +0800
@@ -11,7 +11,7 @@
 std::string
 PrioritySongFilter::ToExpression() const noexcept
 {
-	return fmt::format(FMT_STRING("(prio >= {})"), value);
+	return fmt::format("(prio >= {})", value);
 }
 
 bool
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/SongPrint.cxx mpd-sacd.git-libfmt-v11-patch/src/SongPrint.cxx
--- mpd-sacd.git.orig/src/SongPrint.cxx	2025-01-27 20:31:20.398397175 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/SongPrint.cxx	2025-01-27 20:53:28.723019152 +0800
@@ -30,14 +30,14 @@
 			uri = allocated.c_str();
 	}
 
-	r.Fmt(FMT_STRING(SONG_FILE "{}\n"), uri);
+	r.Fmt(SONG_FILE "{}\n", uri);
 }
 
 void
 song_print_uri(Response &r, const LightSong &song, bool base) noexcept
 {
 	if (!base && song.directory != nullptr)
-		r.Fmt(FMT_STRING(SONG_FILE "{}/{}\n"),
+		r.Fmt(SONG_FILE "{}/{}\n",
 		      song.directory, song.uri);
 	else
 		song_print_uri(r, song.uri, base);
@@ -56,13 +56,13 @@
 	const unsigned end_ms = end_time.ToMS();
 
 	if (end_ms > 0)
-		r.Fmt(FMT_STRING("Range: {}.{:03}-{}.{:03}\n"),
+		r.Fmt("Range: {}.{:03}-{}.{:03}\n",
 		      start_ms / 1000,
 		      start_ms % 1000,
 		      end_ms / 1000,
 		      end_ms % 1000);
 	else if (start_ms > 0)
-		r.Fmt(FMT_STRING("Range: {}.{:03}-\n"),
+		r.Fmt("Range: {}.{:03}-\n",
 		      start_ms / 1000,
 		      start_ms % 1000);
 }
@@ -78,14 +78,14 @@
 		time_print(r, "Last-Modified", song.mtime);
 
 	if (song.audio_format.IsDefined())
-		r.Fmt(FMT_STRING("Format: {}\n"), song.audio_format);
+		r.Fmt("Format: {}\n", song.audio_format);
 
 	tag_print_values(r, song.tag);
 
 	const auto duration = song.GetDuration();
 	if (!duration.IsNegative())
-		r.Fmt(FMT_STRING("Time: {}\n"
-				 "duration: {:1.3f}\n"),
+		r.Fmt("Time: {}\n"
+				 "duration: {:1.3f}\n",
 		      duration.RoundS(),
 		      duration.ToDoubleS());
 }
@@ -101,14 +101,14 @@
 		time_print(r, "Last-Modified", song.GetLastModified());
 
 	if (const auto &f = song.GetAudioFormat(); f.IsDefined())
-		r.Fmt(FMT_STRING("Format: {}\n"), f);
+		r.Fmt("Format: {}\n", f);
 
 	tag_print_values(r, song.GetTag());
 
 	const auto duration = song.GetDuration();
 	if (!duration.IsNegative())
-		r.Fmt(FMT_STRING("Time: {}\n"
-				 "duration: {:1.3f}\n"),
+		r.Fmt("Time: {}\n"
+				 "duration: {:1.3f}\n",
 		      duration.RoundS(),
 		      duration.ToDoubleS());
 }
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/SongSave.cxx mpd-sacd.git-libfmt-v11-patch/src/SongSave.cxx
--- mpd-sacd.git.orig/src/SongSave.cxx	2025-01-27 20:31:20.398397175 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/SongSave.cxx	2025-01-27 21:50:47.552640767 +0800
@@ -28,31 +28,31 @@
 range_save(BufferedOutputStream &os, unsigned start_ms, unsigned end_ms)
 {
 	if (end_ms > 0)
-		os.Fmt(FMT_STRING("Range: {}-{}\n"), start_ms, end_ms);
+		os.Fmt("Range: {}-{}\n", start_ms, end_ms);
 	else if (start_ms > 0)
-		os.Fmt(FMT_STRING("Range: {}-\n"), start_ms);
+		os.Fmt("Range: {}-\n", start_ms);
 }
 
 void
 song_save(BufferedOutputStream &os, const Song &song)
 {
-	os.Fmt(FMT_STRING(SONG_BEGIN "{}\n"), song.filename);
+	os.Fmt(SONG_BEGIN "{}\n", song.filename);
 
 	if (!song.target.empty())
-		os.Fmt(FMT_STRING("Target: {}\n"), song.target);
+		os.Fmt("Target: {}\n", song.target);
 
 	range_save(os, song.start_time.ToMS(), song.end_time.ToMS());
 
 	tag_save(os, song.tag);
 
 	if (song.audio_format.IsDefined())
-		os.Fmt(FMT_STRING("Format: {}\n"), song.audio_format);
+		os.Fmt("Format: {}\n", song.audio_format);
 
 	if (song.in_playlist)
 		os.Write("InPlaylist: yes\n");
 
 	if (!IsNegative(song.mtime))
-		os.Fmt(FMT_STRING(SONG_MTIME ": {}\n"),
+		os.Fmt(SONG_MTIME ": {}\n",
 		       std::chrono::system_clock::to_time_t(song.mtime));
 	os.Write(SONG_END "\n");
 }
@@ -60,14 +60,14 @@
 void
 song_save(BufferedOutputStream &os, const DetachedSong &song)
 {
-	os.Fmt(FMT_STRING(SONG_BEGIN "{}\n"), song.GetURI());
+	os.Fmt(SONG_BEGIN "{}\n", song.GetURI());
 
 	range_save(os, song.GetStartTime().ToMS(), song.GetEndTime().ToMS());
 
 	tag_save(os, song.GetTag());
 
 	if (!IsNegative(song.GetLastModified()))
-		os.Fmt(FMT_STRING(SONG_MTIME ": {}\n"),
+		os.Fmt(SONG_MTIME ": {}\n",
 		       std::chrono::system_clock::to_time_t(song.GetLastModified()));
 	os.Write(SONG_END "\n");
 }
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/Stats.cxx mpd-sacd.git-libfmt-v11-patch/src/Stats.cxx
--- mpd-sacd.git.orig/src/Stats.cxx	2025-01-27 20:31:20.398397175 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/Stats.cxx	2025-01-27 20:57:06.192729791 +0800
@@ -83,10 +83,10 @@
 	unsigned total_duration_s =
 		std::chrono::duration_cast<std::chrono::seconds>(stats.total_duration).count();
 
-	r.Fmt(FMT_STRING("artists: {}\n"
+	r.Fmt("artists: {}\n"
 			 "albums: {}\n"
 			 "songs: {}\n"
-			 "db_playtime: {}\n"),
+			 "db_playtime: {}\n",
 	      stats.artist_count,
 	      stats.album_count,
 	      stats.song_count,
@@ -94,7 +94,7 @@
 
 	const auto update_stamp = db.GetUpdateStamp();
 	if (!IsNegative(update_stamp))
-		r.Fmt(FMT_STRING("db_update: {}\n"),
+		r.Fmt("db_update: {}\n",
 		      std::chrono::system_clock::to_time_t(update_stamp));
 }
 
@@ -109,8 +109,8 @@
 	const auto uptime = std::chrono::steady_clock::now() - start_time;
 #endif
 
-	r.Fmt(FMT_STRING("uptime: {}\n"
-			 "playtime: {}\n"),
+	r.Fmt("uptime: {}\n"
+			 "playtime: {}\n",
 	      std::chrono::duration_cast<std::chrono::seconds>(uptime).count(),
 	      lround(partition.pc.GetTotalPlayTime().count()));
 
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/sticker/Print.cxx mpd-sacd.git-libfmt-v11-patch/src/sticker/Print.cxx
--- mpd-sacd.git.orig/src/sticker/Print.cxx	2025-01-27 20:31:20.458397055 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/sticker/Print.cxx	2025-01-27 21:30:29.327119554 +0800
@@ -11,7 +11,7 @@
 sticker_print_value(Response &r,
 		    const char *name, const char *value)
 {
-	r.Fmt(FMT_STRING("sticker: {}={}\n"), name, value);
+	r.Fmt("sticker: {}={}\n", name, value);
 }
 
 void
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/storage/StorageState.cxx mpd-sacd.git-libfmt-v11-patch/src/storage/StorageState.cxx
--- mpd-sacd.git.orig/src/storage/StorageState.cxx	2025-01-27 20:31:20.458397055 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/storage/StorageState.cxx	2025-01-27 21:48:32.242788297 +0800
@@ -38,10 +38,10 @@
 		if (uri.empty() || StringIsEmpty(mount_uri))
 			return;
 
-		os.Fmt(FMT_STRING(MOUNT_STATE_BEGIN "\n"
+		os.Fmt(MOUNT_STATE_BEGIN "\n"
 				  MOUNT_STATE_STORAGE_URI "{}\n"
 				  MOUNT_STATE_MOUNTED_URL "{}\n"
-				  MOUNT_STATE_END "\n"),
+				  MOUNT_STATE_END "\n",
 		       mount_uri, uri);
 	};
 
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/TagPrint.cxx mpd-sacd.git-libfmt-v11-patch/src/TagPrint.cxx
--- mpd-sacd.git.orig/src/TagPrint.cxx	2025-01-27 20:31:20.398397175 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/TagPrint.cxx	2025-01-27 20:58:25.455958664 +0800
@@ -15,19 +15,19 @@
 	const auto tag_mask = global_tag_mask & r.GetTagMask();
 	for (unsigned i = 0; i < TAG_NUM_OF_ITEM_TYPES; i++)
 		if (tag_mask.Test(TagType(i)))
-			r.Fmt(FMT_STRING("tagtype: {}\n"), tag_item_names[i]);
+			r.Fmt("tagtype: {}\n", tag_item_names[i]);
 }
 
 void
 tag_print(Response &r, TagType type, std::string_view value) noexcept
 {
-	r.Fmt(FMT_STRING("{}: {}\n"), tag_item_names[type], value);
+	r.Fmt("{}: {}\n", tag_item_names[type], value);
 }
 
 void
 tag_print(Response &r, TagType type, const char *value) noexcept
 {
-	r.Fmt(FMT_STRING("{}: {}\n"), tag_item_names[type], value);
+	r.Fmt("{}: {}\n", tag_item_names[type], value);
 }
 
 void
@@ -43,8 +43,8 @@
 tag_print(Response &r, const Tag &tag) noexcept
 {
 	if (!tag.duration.IsNegative())
-		r.Fmt(FMT_STRING("Time: {}\n"
-				 "duration: {:1.3f}\n"),
+		r.Fmt("Time: {}\n"
+				 "duration: {:1.3f}\n",
 		      tag.duration.RoundS(),
 		      tag.duration.ToDoubleS());
 
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/TagSave.cxx mpd-sacd.git-libfmt-v11-patch/src/TagSave.cxx
--- mpd-sacd.git.orig/src/TagSave.cxx	2025-01-27 20:31:20.398397175 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/TagSave.cxx	2025-01-27 21:44:44.513030891 +0800
@@ -14,12 +14,12 @@
 tag_save(BufferedOutputStream &os, const Tag &tag)
 {
 	if (!tag.duration.IsNegative())
-		os.Fmt(FMT_STRING(SONG_TIME "{}\n"), tag.duration.ToDoubleS());
+		os.Fmt(SONG_TIME "{}\n", tag.duration.ToDoubleS());
 
 	if (tag.has_playlist)
 		os.Write("Playlist: yes\n");
 
 	for (const auto &i : tag)
-		os.Fmt(FMT_STRING("{}: {}\n"),
+		os.Fmt("{}: {}\n",
 		       tag_item_names[i.type], i.value);
 }
diff '--exclude=.git' '--exclude=.github' --unified --recursive --text mpd-sacd.git.orig/src/TimePrint.cxx mpd-sacd.git-libfmt-v11-patch/src/TimePrint.cxx
--- mpd-sacd.git.orig/src/TimePrint.cxx	2025-01-27 20:31:20.398397175 +0800
+++ mpd-sacd.git-libfmt-v11-patch/src/TimePrint.cxx	2025-01-27 20:59:28.712542293 +0800
@@ -20,5 +20,5 @@
 		return;
 	}
 
-	r.Fmt(FMT_STRING("{}: {}\n"), name, s.c_str());
+	r.Fmt("{}: {}\n", name, s.c_str());
 }
